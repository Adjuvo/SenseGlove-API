<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SGCoreCs</name>
    </assembly>
    <members>
        <member name="T:SGCore.Kinematics.Anatomy">
            <summary> "Database" of anatomical values, such as joint limits. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Anatomy.LIMIT_MIN">
            <summary> Index of minimum value </summary>
        </member>
        <member name="F:SGCore.Kinematics.Anatomy.LIMIT_MAX">
            <summary> Index of maximum value </summary>
        </member>
        <member name="F:SGCore.Kinematics.Anatomy.thumbLimits">
            <summary> Hard Coded thumb limits, in radians </summary>
        </member>
        <member name="F:SGCore.Kinematics.Anatomy.fingerLimits">
            <summary> Hard Coded finger limits, in radians </summary>
        </member>
        <member name="M:SGCore.Kinematics.Anatomy.GetFingerJointLimit(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary> Retrieve one of the limits of a finger joint's movement. </summary>
            <param name="right"></param>
            <param name="joint"></param>
            <param name="movement"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Anatomy.GetThumbJointLimit(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary> Retrieve one of the limits of a thumb joint's movement. </summary>
            <param name="right"></param>
            <param name="joint"></param>
            <param name="movement"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Anatomy.NormalizeFingerFlex(System.Single)">
            <summary> Convert a total finger flexion in radians into a 0..1 representation. </summary>
            <param name="flexionInRad"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Anatomy.NormalizeThumbFlex(System.Single)">
            <summary> Convert a total finger flexion in radians into a 0..1 representation. </summary>
            <param name="flexionInRad"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.BasicHandModel">
            <summary> Represents data of a user's hand required for forward kinematics. </summary>
        </member>
        <member name="P:SGCore.Kinematics.BasicHandModel.FingerLengths">
            <summary> The length of individual finger phalangers in mm, soted per finger. Generally 5x3 </summary>
        </member>
        <member name="P:SGCore.Kinematics.BasicHandModel.StartJointPositions">
            <summary> Starting joint positions relative to the device Origin </summary>
        </member>
        <member name="P:SGCore.Kinematics.BasicHandModel.StartJointRotations">
            <summary> Starting joint rotations relative to the device Origin </summary>
        </member>
        <member name="P:SGCore.Kinematics.BasicHandModel.TotalLengths">
            <summary> Calculated Total finger lengths </summary>
        </member>
        <member name="P:SGCore.Kinematics.BasicHandModel.FingerRatios">
            <summary> Calculated Finger ratios [0..1] </summary>
        </member>
        <member name="F:SGCore.Kinematics.BasicHandModel.baseFingerLengths">
            <summary> Default finger lengths (based on right hand). </summary>
            <remarks> Any missing fingers are replaced with their respective value. </remarks>
        </member>
        <member name="F:SGCore.Kinematics.BasicHandModel.baseJointPositions">
            <summary> Default joint positions (based on right hand). </summary>
            <remarks> Any missing positions are replaced with their respective value. </remarks>
        </member>
        <member name="F:SGCore.Kinematics.BasicHandModel.baseJointRotations">
            <summary> Default joint rotations (based on right hand). </summary>
            <remarks> Any missing rotation are replaced with their respective value. </remarks>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.#ctor(System.Boolean,System.Single[][],SGCore.Kinematics.Vect3D[])">
            <summary> Create a new basicHandModel with no starting rotations. </summary>
            <param name="right">If this is a right hand (used in validation)</param>
            <param name="lengths"></param>
            <param name="startPositions"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.#ctor(System.Boolean,System.Single[][],SGCore.Kinematics.Vect3D[],SGCore.Kinematics.Quat[])">
            <summary> Create a new basicHandModel </summary>
            <param name="right">If this is a right hand (used in validation)</param>
            <param name="lengths"></param>
            <param name="startPositions"></param>
            <param name="startRotations"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Default(System.Boolean)">
            <summary> Retrieve a default left or right hand model. </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Validate">
            <summary> Test if the input has enough values. if not, add the appropriate values to compensate. </summary>
            <param name="right"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.GetFingerLengths(SGCore.Finger)">
            <summary> Retrieve the finger lengths of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.SetFingerLengths(System.Single[],SGCore.Finger)">
            <summary> Set the finger lengths of a specific finger. </summary>
            <param name="newLengths"></param>
            <param name="finger"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.GetJointPosition(SGCore.Finger)">
            <summary> Retrieve the start position of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.SetJointPosition(SGCore.Kinematics.Vect3D,SGCore.Finger)">
            <summary> Set the start position of a specific finger </summary>
            <param name="newPosition"></param>
            <param name="finger"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.GetJointRotation(SGCore.Finger)">
            <summary> Retrieve the start rotation of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.SetJointRotation(SGCore.Kinematics.Quat,SGCore.Finger)">
            <summary> Set the start rotation of a specific finger </summary>
            <param name="newRotation"></param>
            <param name="finger"></param>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Get3DLengths(SGCore.Finger)">
            <summary> Retrieve the lengths of a specific finger, as Vect3D representation (L, 0, 0). </summary>
            <remarks> Used for forwards kinematics. </remarks>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.ToString">
            <summary> ToString notation using only  </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Equals(SGCore.Kinematics.BasicHandModel)">
            <summary> Check if one HandModel equals another in geometry. </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Serialize">
            <summary> Convert this BasicHandModel into a string representation </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.BasicHandModel.Deserialize(System.String)">
            <summary> Convert a string representation of a BasicHandModel back to a useable class. </summary>
            <param name="serializedString"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.ThumbMovement">
            <summary> Anatomical movements of the thumb joints. </summary>
        </member>
        <member name="F:SGCore.Kinematics.ThumbMovement.T_CMC_Twist">
            <summary> Pronation/Supination of the first finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.ThumbMovement.T_CMC_Flex">
            <summary> Flexion of the first finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.ThumbMovement.T_CMC_Abd">
            <summary> Abduction of the first finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.ThumbMovement.T_MCP_Flex">
            <summary> Flexion of the second thumb joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.ThumbMovement.T_IP_Flex">
            <summary> Flexion of the third thumb joint. </summary>
        </member>
        <member name="T:SGCore.Kinematics.FingerMovement">
            <summary> Anatomical movements of the finger joints. </summary>
        </member>
        <member name="F:SGCore.Kinematics.FingerMovement.F_MCP_Flex">
            <summary> Flexion of the first finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.FingerMovement.F_MCP_Abd">
            <summary> Abduction of the first finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.FingerMovement.F_PIP_Flex">
            <summary> Flexion of the second finger joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.FingerMovement.F_DIP_Flex">
            <summary> Flexion of the third finger joint. </summary>
        </member>
        <member name="T:SGCore.Kinematics.HandInterpolator">
            <summary> Contains interpolation sets of all joint movements that can be caluclated into a handPose. </summary>
        </member>
        <member name="P:SGCore.Kinematics.HandInterpolator.CmcStartRot">
            <summary> Starting rotation of the thumb cmc joint. </summary>
        </member>
        <member name="F:SGCore.Kinematics.HandInterpolator.jointInterpolations">
            <summary> Interpolation sets for each finger. First index indicates which finger, Second index indicates the joint movement. </summary>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.#ctor(SGCore.Kinematics.InterpolationSet[][])">
            <summary> Create a new basic HandInterpolator without a starting rotation. </summary>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.#ctor(SGCore.Kinematics.InterpolationSet[][],SGCore.Kinematics.Quat)">
            <summary> Create a new basic HandInterpolator with a starting rotation. </summary>
            <param name="interpolations"></param>
            <param name="cmcStart"></param>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.Default(System.Boolean)">
            <summary> Create a default instance of a left- or right handed interpolator. </summary>
            <param name="rightHand"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.CalculateAngle(SGCore.Finger,System.Int32,System.Single)">
            <summary> Calculate any finger's movement rotation, using an input value. </summary>
            <param name="finger"></param>
            <param name="movement"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.CalculateAngle(SGCore.Finger,SGCore.Kinematics.FingerMovement,System.Single)">
            <summary> Calculate a finger movement's rotation, using an input value. </summary>
            <param name="finger"></param>
            <param name="movement"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.CalculateAngle(SGCore.Finger,SGCore.Kinematics.ThumbMovement,System.Single)">
            <summary> Calculate a thumb movement's rotation, using an input value. </summary>
            <param name="finger"></param>
            <param name="movement"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.InterpolateFingerAngles(SGCore.Finger,SGCore.Kinematics.HandInterpolator,SGCore.Kinematics.Vect3D)">
            <summary> Calculate all angles of a specific finger based on an Interpolator and input angles. </summary>
            <param name="finger"></param>
            <param name="interpolator"></param>
            <param name="totalAngles"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.InterpolateThumbAngles(SGCore.Kinematics.HandInterpolator,SGCore.Kinematics.Vect3D)">
            <summary> Calculate all angles of the Thumb based on an Interpolator and input angles. </summary>
            <param name="interpolator"></param>
            <param name="totalAngles"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.HandInterpolator.InterpolateHandAngles(SGCore.Kinematics.HandInterpolator,SGCore.Kinematics.Vect3D[])">
            <summary> Calculate all hand angles based on an interpolator and total xyz angles. </summary>
            <param name="profile"></param>
            <param name="totalAngles"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.InterpolationSet">
            <summary> Set of variables to map a value from one range to the next. </summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.x0">
            <summary> First value of input range.</summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.x1">
            <summary> Second value of input range. </summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.y0">
            <summary> First value of output range. </summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.y1">
            <summary> Second value of output range. </summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.min">
            <summary> Minumum range of the output value. </summary>
        </member>
        <member name="P:SGCore.Kinematics.InterpolationSet.max">
            <summary> Maximum range of the output value. </summary>
        </member>
        <member name="M:SGCore.Kinematics.InterpolationSet.#ctor">
            <summary> Creates a basic interpolation set, without limits. </summary>
        </member>
        <member name="M:SGCore.Kinematics.InterpolationSet.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a new interpolation set without limits. </summary>
            <param name="from1"></param>
            <param name="from2"></param>
            <param name="to1"></param>
            <param name="to2"></param>
        </member>
        <member name="M:SGCore.Kinematics.InterpolationSet.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a new interpolation set with limits. </summary>
            <param name="from1"></param>
            <param name="from2"></param>
            <param name="to1"></param>
            <param name="to2"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:SGCore.Kinematics.InterpolationSet.Get(System.Single,System.Boolean,System.Boolean)">
            <summary> Calculate an output value in range [x0...x1] to [y0..y1] </summary>
            <param name="value"> The input value to map to range [y0...y1] </param>
            <param name="limit"> Set to true to limit the value between [min...max] </param>
            <param name="normalizeAngle"> If this value is true, the output is limited between [-Pi, Pi]. </param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.JointKinematics">
            <summary> Class to calculate Sense Glove kinematics. </summary>
        </member>
        <member name="M:SGCore.Kinematics.JointKinematics.ForwardKinematics(SGCore.Kinematics.Vect3D,SGCore.Kinematics.Quat,SGCore.Kinematics.Vect3D[],SGCore.Kinematics.Vect3D[],SGCore.Kinematics.Vect3D[]@,SGCore.Kinematics.Quat[]@)">
            <summary> 
            Perform foward Kinematics on a set of joints, defined by a start position- and rotation, 
            joint angles and the lenghts in between. Outputs the calculated positions and rotations.
            </summary>
            <param name="startPosition"></param>
            <param name="startRotation"></param>
            <param name="jointLengths"></param>
            <param name="jointAngles"></param>
            <param name="newPositions"></param>
            <param name="newRotations"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.JointKinematics.ForwardKinematics(SGCore.Kinematics.BasicHandModel,SGCore.Finger,SGCore.Kinematics.Vect3D[],SGCore.Kinematics.Vect3D[]@,SGCore.Kinematics.Quat[]@)">
            <summary> Calculate positions and rotations of a finger based on input angles and profile. </summary>
            <param name="profile"></param>
            <param name="finger"></param>
            <param name="jointAngles"></param>
            <param name="newPositions"></param>
            <param name="newRotations"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.JointKinematics.GetBestFinger(SGCore.Kinematics.Vect3D[],SGCore.Finger@,SGCore.Kinematics.Vect3D@)">
            <summary> Get the closest finger to the thumb? </summary>
            <param name="tipPositions"></param>
            <param name="bestFinger"></param>
            <param name="offset"></param>
        </member>
        <member name="T:SGCore.Kinematics.Quat">
            <summary> A rotation in 3D space that can be applied to a 3D vector or converted into Euler Angles. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Quat.x">
            <summary> Quaternion element. Not directly related to a rotation or position. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Quat.y">
            <summary> Quaternion element. Not directly related to a rotation or position. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Quat.z">
            <summary> Quaternion element. Not directly related to a rotation or position. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Quat.w">
            <summary> Quaternion element. Not directly related to a rotation or position. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Quat.identity">
            <summary> Represents 'no rotation' in quaternion space. </summary>
        </member>
        <member name="M:SGCore.Kinematics.Quat.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a new Quaternion rotation. </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SGCore.Kinematics.Quat.FromEuler(System.Single,System.Single,System.Single)">
            <summary> Create a new Quaternion from an euler angle representation. </summary>
            <param name="xAngle"></param>
            <param name="yAngle"></param>
            <param name="zAngle"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.FromEuler(SGCore.Kinematics.Vect3D)">
            <summary> Create a new Quaternion from an euler angle representation. </summary>
            <param name="euler"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.FromAngleAxis(System.Single,System.Single,System.Single,System.Single)">
            <summary> Create a new Quaternion Rotation from an angle-axis representation. </summary>
            <param name="angle"></param>
            <param name="axisX"></param>
            <param name="axisY"></param>
            <param name="axisZ"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.FromAngleAxis(System.Single,SGCore.Kinematics.Vect3D)">
            <summary> Create a new Quaternion Rotation from an angle-axis representation. </summary>
            <param name="angle"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.ToString">
            <summary> Create a string representation of the Quaternion rotation. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.ToEuler">
            <summary> Retrieve this Quaternion's euler angle notation. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.Rotate(SGCore.Kinematics.Vect3D)">
            <summary> Rotate myVect by this quaternion rotation. </summary>
            <param name="myVect"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.Equals(System.Object)">
            <summary> Check if two quaternions have equal values. </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.GetHashCode">
            <summary> Returns the hash code for this instance. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.IsIdentity">
            <summary> Check if this Quaternion is the identity quaternion (meaning it does not rotate anything.) </summary>
        </member>
        <member name="M:SGCore.Kinematics.Quat.Invert(SGCore.Kinematics.Quat)">
            <summary> Returns the inverse if q (a.k.a. a rotation in the other direction) </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.op_Multiply(SGCore.Kinematics.Quat,SGCore.Kinematics.Quat)">
            <summary> Multiply one quaternion with another one. By order of operations, the q2 is rotated before q1. </summary>
            <param name="q1"></param>
            <param name="q2"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.op_Multiply(SGCore.Kinematics.Vect3D,SGCore.Kinematics.Quat)">
            <summary> Multiply this quaternion with a Vect3, a.k.a. rotate it. </summary>
            <param name="that"></param>
            <param name="q1"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.Serialize(System.Char)">
            <summary> Serialize this quaternion with a delimiter. </summary>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Quat.Deserialize(System.String,SGCore.Kinematics.Quat@,System.Char)">
            <summary> Parse a Quaternion from a string. </summary>
            <param name="str"></param>
            <param name="result"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.Values">
            <summary> Utility class to convert values into various formats. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Values.Rad2Deg">
            <summary> Converts radians into degrees </summary>
        </member>
        <member name="F:SGCore.Kinematics.Values.Deg2Rad">
            <summary> Converts degrees into radians </summary>
        </member>
        <member name="F:SGCore.Kinematics.Values._2PI">
            <summary> 2*PI is used frequently in angle normalization </summary>
        </member>
        <member name="M:SGCore.Kinematics.Values.Radians(SGCore.Kinematics.Vect3D)">
            <summary> Convert a vector of degrees angles into radians. </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.Degrees(SGCore.Kinematics.Vect3D)">
            <summary> Convert a vector of radian angles into degrees. </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.NormalizeAngle(System.Single)">
            <summary> Ensure that a single angle is within the [-Pi...Pi] range. </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.NormalizeAngle(System.Single,System.Single,System.Single)">
            <summary> Normalize and angle between a variable range. </summary>
            <param name="angle"></param>
            <param name="minAngle"></param>
            <param name="maxAngle"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.NormalizeAngles(SGCore.Kinematics.Vect3D)">
            <summary> Normalize a set of angles in radians. </summary>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.Clamp(System.Single,System.Single,System.Single)">
            <summary> Ensure that a value remains within the [min...max] range. </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary> Ensure that an integer value remains within the [min...max] range. </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Map a value from one range [from1...from2] to another range [to1 .. to2] </summary>
            <param name="value"></param>
            <param name="from1"></param>
            <param name="from2"></param>
            <param name="to1"></param>
            <param name="to2"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Values.Map(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary> Map a value from one range [from1...from2] to another range [to1 .. to2],
            while ensuring it stays within the [min...max] range. </summary>
            <param name="value"></param>
            <param name="from1"></param>
            <param name="from2"></param>
            <param name="to1"></param>
            <param name="to2"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Kinematics.Vect3D">
            <summary> Represents a vector with x,y,z coordinates. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Vect3D.x">
            <summary> X coordinate. Pronation/Supination for rotations. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Vect3D.y">
            <summary> Y coordinate. Flexion/Extension for rotations. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Vect3D.z">
            <summary> Z coordinate. Abduction/Adduction for rotations. </summary>
        </member>
        <member name="F:SGCore.Kinematics.Vect3D.zero">
            <summary> Represents a vector with coordinates (0, 0, 0). </summary>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.#ctor(System.Single,System.Single,System.Single)">
            <summary> Create a new Vect3D </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Magnitude">
            <summary> Calculate the magnitude or 'length' of this Vector </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Normalized">
            <summary> Returns this vector normalized to have a Magnitude on 1. </summary>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Scale(System.Single)">
            <summary> Scale all elements of this vector by a certain factor. </summary>
            <param name="s"></param>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.DistTo(SGCore.Kinematics.Vect3D)">
            <summary> Calculate the distance between this Vector and another one. </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Equals(SGCore.Kinematics.Vect3D)">
            <summary> Check if this Vector is roughly equal to another. </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.ToString">
            <summary> Create a string representation of this Vector. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.op_Addition(SGCore.Kinematics.Vect3D,SGCore.Kinematics.Vect3D)">
            <summary> Add two vectors together. </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.op_Subtraction(SGCore.Kinematics.Vect3D,SGCore.Kinematics.Vect3D)">
            <summary> Subtract two vectors from each other. </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.op_Multiply(System.Single,SGCore.Kinematics.Vect3D)">
            <summary> Scale the vector v by factor S. </summary>
            <param name="S"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.op_Multiply(SGCore.Kinematics.Quat,SGCore.Kinematics.Vect3D)">
            <summary> Rotates a vector by a quaternion rotation. </summary>
            <param name="q"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Deserialize(System.String,SGCore.Kinematics.Vect3D@,System.Char)">
            <summary> Create a Vect3D from a string representation. </summary>
            <param name="str"></param>
            <param name="result"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Kinematics.Vect3D.Serialize(System.Char)">
            <summary> Serialize this vector to store it on disk. </summary>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.BetaDevice">
            <summary> A Sense Glove device that is not yet added to the API. </summary>
        </member>
        <member name="F:SGCore.BetaDevice.cString">
            <summary> The constants string retrieved when the device is first connected. </summary>
        </member>
        <member name="F:SGCore.BetaDevice.deviceID">
            <summary> The deviceID of this Beta Device. </summary>
        </member>
        <member name="F:SGCore.BetaDevice.hwVersion">
            <summary> The hardware (sub) version of this Beta Device. </summary>
        </member>
        <member name="F:SGCore.BetaDevice.fwVersionMain">
            <summary> The firmware version of the Beta Device. </summary>
        </member>
        <member name="F:SGCore.BetaDevice.fwVersionSub">
            <summary> The firmware version of the Beta Device. </summary>
        </member>
        <member name="M:SGCore.BetaDevice.#ctor(System.String,System.String,System.String,System.String)">
            <summary> Creates a new instance of a Beta Device. </summary>
        </member>
        <member name="M:SGCore.BetaDevice.GetDeviceID">
            <summary> Retrieve this device's unique identifier. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetDeviceType">
            <summary> Retrieve the DeviceType of this SGDevice. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetHardwareVersion">
            <summary> Retrieve this device's hardware version. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetFirmwareVersion">
            <summary> Retireve this device's firmware version. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetConstantsString">
            <summary> Retrieve the Constants string for additional processing. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetSensorData">
            <summary> Retrieve a raw sensor string from this Beta Device. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.GetLastCmd">
            <summary> Retireve a the last command retrieved from this Beta Device. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.SendCmd(System.String)">
            <summary> Send a raw string command to this device. </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.ToString">
            <summary> Retrieve a string representation of this BetaDevice. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.BetaDevice.Parse(System.String)">
            <summary> Parse a Beta Device from a cString. </summary>
            <param name="cString"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Util.ListFormat">
            <summary> Indices to access DeviceList data in Shared Memory </summary>
        </member>
        <member name="T:SGCore.Util.SensorFormat">
            <summary> Indices to access Sensor Data in Shared Memory </summary>
        </member>
        <member name="T:SGCore.Util.Communications">
            <summary> "Database" containing communications bytes and conversions. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.cmdOpen">
            <summary> Byte indicating the start of a new command. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.cmdClose">
            <summary> Byte indicating the end of a command. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.senseOpen">
            <summary> Byte indicating the start of a new sensor data package. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.senseClose">
            <summary> Byte indicating the end of a sensor data package. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.listDelimiter">
            <summary> Denotes a block section of a DeviceList section. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.sectionDelimiter">
            <summary> ':' - Used to split a set of different contant values into individual groups. </summary>
        </member>
        <member name="F:SGCore.Util.Communications.colDelimiter">
            <summary> ';' - Used to separate individual values </summary>
        </member>
        <member name="F:SGCore.Util.Communications.rowDelimiter">
            <summary> '|' - Used to group a set of values, for example per finger. </summary>
        </member>
        <member name="M:SGCore.Util.Communications.ToSGByte(System.Int32)">
            <summary> Convert a value between 0..100 to a Sense Glove char/byte </summary>
            <param name="lvl"></param>
            <remarks> Placed here so that external parties do not get direct access to this. </remarks>
            <returns></returns>
        </member>
        <member name="M:SGCore.Util.Serializer.FilterSpaces(System.String)">
            summary[ Filters spaces from a a string. /summary[
        </member>
        <member name="M:SGCore.Util.Serializer.SplitBlocks(System.String,System.Boolean)">
            summary[ Split a serialized string by its top level blocks /summary[
        </member>
        <member name="T:SGCore.Util.StrStuff">
            <summary> Utility class to convert strings into useable values. </summary>
        </member>
        <member name="M:SGCore.Util.StrStuff.ToInt(System.String,System.Int32)">
            <summary> Convert a string into an integer value </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Util.StrStuff.ToFloat(System.String,System.Single)">
            <summary> Convert a string into a decimal value. </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Util.StrStuff.DegString(System.Single)">
            <summary> Convert a radian notation into a readable degrees string.  </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Util.StrStuff.QuickSplit(System.String,System.Char,System.Int32)">
            <summary> 
            Retrieve a single section from a delimited string at a specific index.
            It is much faster at lower indices.
            Use when only one section of a string is interesting to you.
            </summary>
            <param name="input"></param>
            <param name="delim"></param>
            <param name="getIndex"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.Diagnostics.DebugLevel">
            <summary> Levels of debugging available from the Sense Glove API. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugLevel.Disabled">
            <summary> No debug messages will be sent. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugLevel.ErrorsOnly">
            <summary> Send only messages if errors are caught. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugLevel.DeviceParsing">
            <summary> Send messages from device Parsing. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugLevel.ALL">
            <summary> For those we have no place for yet. </summary>
        </member>
        <member name="T:SGCore.Diagnostics.DebugArgs">
            <summary> Debugging arguments containing the message sent and its level. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugArgs.message">
            <summary> The message sent by the Debugger. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.DebugArgs.debugLv">
            <summary> The Debug level of the accompanying message </summary>
        </member>
        <member name="M:SGCore.Diagnostics.DebugArgs.#ctor(System.String,SGCore.Diagnostics.DebugLevel)">
            <summary> Create a new Instance of DebugArgs. </summary>
            <param name="msg"></param>
            <param name="lv"></param>
        </member>
        <member name="T:SGCore.Diagnostics.Debugger">
            <summary> Singleton class that reports debug messages. Can be subscribed to by other programs. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.Debugger.debugLv">
            <summary> The current debug level of the Sense Glove Debugger. </summary>
        </member>
        <member name="M:SGCore.Diagnostics.Debugger.#ctor">
            <summary> Empty Constructor to create the instance. </summary>
        </member>
        <member name="F:SGCore.Diagnostics.Debugger.defaultDebugLvl">
            <summary> The Default debug level for any application </summary>
        </member>
        <member name="F:SGCore.Diagnostics.Debugger.instance">
            <summary> Instance of the Debugger to which events can be subscribed. </summary>
        </member>
        <member name="P:SGCore.Diagnostics.Debugger.Instance">
            <summary> Access the Debugger instance. </summary>
        </member>
        <member name="P:SGCore.Diagnostics.Debugger.DebugLevel">
            <summary> The debug level of the Debugger </summary>
        </member>
        <member name="M:SGCore.Diagnostics.Debugger.Log(System.String,SGCore.Diagnostics.DebugLevel)">
            <summary>
            Attempt to post output to the System.Console class. If that fails, try to write to the System.Diagnostics.Debug class.
            </summary>
            <param name="message">The message to write to the user.</param>
            <param name="level"></param>
        </member>
        <member name="T:SGCore.Diagnostics.Debugger.MessageRecievedEventHandler">
            <summary> Delegate for the DebugMessageRecieved event. </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="E:SGCore.Diagnostics.Debugger.DebugMessageRecieved">
            <summary> Fires when a new message is recieved by the Debugger. </summary>
        </member>
        <member name="M:SGCore.Diagnostics.Debugger.OnMessageRecieved(System.String,SGCore.Diagnostics.DebugLevel)">
            <summary> Constructs DebugArs and Fires the MessageRecieved event. </summary>
            <param name="msg"></param>
            <param name="lvl"></param>
        </member>
        <member name="T:SGCore.DeviceList">
            <summary> Interface for SenseCom, allows the retrieval of Devices and Data. </summary>
        </member>
        <member name="F:SGCore.DeviceList.devices">
            <summary> A list of all devices that have been detected via the SenseComm executable. </summary>
        </member>
        <member name="M:SGCore.DeviceList.SenseCommRunning">
            <summary> Returns true if the SenseComm program is running. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.DeviceList.ActiveDevices">
            <summary> Retrieve the number of devices that have been detected by the SenseComm executable. </summary>
        </member>
        <member name="M:SGCore.DeviceList.GetDevices">
            <summary> Retrieve all Sense Glove Devices connected to this system. </summary>
        </member>
        <member name="M:SGCore.DeviceList.GetDevices``1">
            <summary> Retrieve a list of SGDevices of a specific class. </summary>
            <typeparam name="T"> Subclass of SGDevice. </typeparam>
            <returns></returns>
        </member>
        <member name="M:SGCore.DeviceList.CheckDevices">
            <summary> Check the IPC for new data, and add any new devices to our list. </summary>
            <remarks> Should be called whenver any GetDevices functions is called. </remarks>
        </member>
        <member name="M:SGCore.DeviceList.GetDeviceStringAt(System.String,System.Int32)">
            <summary> Grab data from the Device string (connected/pps/type) at a specific index. </summary>
            <param name="ipcAddress"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.DeviceList.GetSensorDataString(System.String,System.String@)">
            <summary> Retrieve the latest sensor data string from the device at ipcAddress. </summary>
            <param name="ipcAddress"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.DeviceList.SendHaptics(System.String,System.String)">
            <summary> Send command(s) in string format to the device at ipcAddress. </summary>
            <param name="ipcAddress"></param>
            <param name="commands"></param>
            <returns> Returns true if the command has been sent succesfully. </returns>
        </member>
        <member name="M:SGCore.DeviceList.Deserialize(System.String,SGCore.SGDevice@)">
            <summary> Factory function to deserialize an SGDevice out of a DeviceList string. </summary>
            <remarks> Intended use: Returns true if serialization is succesfull, false if errors occured. In that case output = null. </remarks>
            <param name="serialized"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.DeviceModel">
            <summary> Base class containing the minimum amount of data for device models. </summary>
        </member>
        <member name="P:SGCore.DeviceModel.DeviceID">
            <summary> Unique identifier of this device. </summary>
        </member>
        <member name="P:SGCore.DeviceModel.HardwareVer">
            <summary> Hardware (sub) version of this Sense Glove Device. </summary>
        </member>
        <member name="P:SGCore.DeviceModel.FirmwareVer">
            <summary> Firmware version running on the device's MicroController. (as v4.12, this is the 4) </summary>
        </member>
        <member name="P:SGCore.DeviceModel.SubFirmwareVer">
            <summary> Sub firmware version runnning on the device's microcontroller (as v4.12, this is the .12) </summary>
        </member>
        <member name="M:SGCore.DeviceModel.ParseFunctions(System.Int32,System.Int32)">
            <summary> Convert an integer into an array of functions. </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.DeviceType">
            <summary> Specific Sense Glove Device Types. </summary>
        </member>
        <member name="F:SGCore.DeviceType.UNKNOWN">
            <summary> This device is not recognized by the Sense Glove API. </summary>
        </member>
        <member name="F:SGCore.DeviceType.BETADEVICE">
            <summary> A Device that is in development, with direct access to sensor data and commands. </summary>
        </member>
        <member name="F:SGCore.DeviceType.SENSEGLOVE">
            <summary> An exoskeleton glove that provides force- and haptic feedback. </summary>
        </member>
        <member name="F:SGCore.DeviceType.FINO">
            <summary> A soft glove with force feedback and optional on-board sensors. </summary>
        </member>
        <member name="T:SGCore.Finger">
            <summary> One of the fingers on the hand </summary>
        </member>
        <member name="F:SGCore.Finger.Thumb">
            <summary> Responsible for our evolutionary success! </summary>
        </member>
        <member name="F:SGCore.Finger.Index">
            <summary> Used to point at what you want </summary>
        </member>
        <member name="F:SGCore.Finger.Middle">
            <summary> On its own, this one is used to indicate frustration. </summary>
        </member>
        <member name="F:SGCore.Finger.Ring">
            <summary> If you like it then you should have put a ___ on it </summary>
        </member>
        <member name="F:SGCore.Finger.Pinky">
            <summary> The little finger. </summary>
        </member>
        <member name="F:SGCore.Fino.Fino.hapticsByte">
            <summary> Byte indicating a new Sense Glove haptic command. </summary>
        </member>
        <member name="M:SGCore.Fino.Fino.GetGloveModel">
            <summary> Access DeviceInfo of this Fino </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.GetSensorData(SGCore.Fino.Fino_SensorData@)">
            <summary> Get the latest Sensor Data from this Sense Glove. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.GetIMURotation(SGCore.Kinematics.Quat@)">
            <summary> Retrieve Fino rotation </summary>
            <param name="IMU"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.GetHandPose(SGCore.Kinematics.BasicHandModel,SGCore.Fino.Fino_Profile,SGCore.HandPose@)">
            <summary> Retrieve a new hand pose using this glove, based on (calibrated) user data. </summary>
            <param name="profile"></param>
            <param name="solver"></param>
            <param name="handPose"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.CalculateHandPose(SGCore.Kinematics.BasicHandModel,SGCore.Fino.Fino_SensorData,SGCore.Fino.Fino_Profile)">
            <summary> Calculate a HandPose based on a glovePose and a solver. </summary>
            <remarks> Use this when you already have a GlovePose </remarks>
            <param name="glovePose"></param>
            <param name="profile"></param>
            <param name="solver"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.Parse(System.String)">
            <summary> Deserializes a Sense Glove from its CString. Returns a nullptr if unsuccesful. </summary>
             <param name="cString"></param>
             <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.GetCalibrationValues(SGCore.Kinematics.Vect3D[]@)">
            <summary>  Retrieve calibration values of this glove, as an array of size 5, containing x (roll), y (flexion), z (abduction) values. </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.GetCalibrationValues(SGCore.Fino.Fino_SensorData)">
            <summary> Convert a SenseGlove GlovePose into calibrationValues. </summary>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Fino.Fino.ApplyCalibration(SGCore.HandProfile@)">
            <summary> Applies the calibration range of this Fino a HandProfile </summary>
            <param name="profile"></param>
        </member>
        <member name="M:SGCore.Fino.Fino.ApplyCalibration(SGCore.Fino.Fino_Profile@)">
            <summary> Applies the calibration range of this SenseGlove to a Fino_Profile </summary>
            <param name="profile"></param>
        </member>
        <member name="P:SGCore.Fino.Fino_GloveInfo.IsRight">
            <summary> Determines if this is a right-handed Fino. </summary>
        </member>
        <member name="P:SGCore.Fino.Fino_GloveInfo.ImuCorrection">
            <summary> The IMU correction of this Fino. </summary>
        </member>
        <member name="F:SGCore.Fino.Parsing.Fino_CVar.AllC">
            <summary> Utility value used in iteration / checking lengths </summary>
        </member>
        <member name="M:SGCore.Fino.Fino_Profile.Reset">
            <summary> Resets this profile to default values. </summary>
        </member>
        <member name="T:SGCore.HandPose">
            <summary> Contains all variables required to draw or analyze a virtual hand. </summary>
        </member>
        <member name="F:SGCore.HandPose.isRight">
            <summary> Whether or not this HandPose was created to be a right- or left hand. </summary>
        </member>
        <member name="F:SGCore.HandPose.jointPositions">
            <summary> Positions of all hand joints relative to the Sense Glove origin. From thumb to pinky, proximal to distal. </summary>
        </member>
        <member name="F:SGCore.HandPose.jointRotations">
            <summary> Quaternion rotations of all hand joints. From thumb to pinky, proximal to distal. </summary>
        </member>
        <member name="F:SGCore.HandPose.handAngles">
            <summary> Euler representations of all possible hand angles. From thumb to pinky, proximal to distal. </summary>
        </member>
        <member name="M:SGCore.HandPose.#ctor(System.Boolean,SGCore.Kinematics.Vect3D[][],SGCore.Kinematics.Quat[][],SGCore.Kinematics.Vect3D[][])">
            <summary> Create a new instance of HandPose. </summary>
            <param name="right"></param>
            <param name="jointPos"></param>
            <param name="jointRot"></param>
            <param name="hAngles"></param>
        </member>
        <member name="M:SGCore.HandPose.DefaultIdle(System.Boolean)">
            <summary> Create a new instance of a left or right handed Pose that is "idle"; in a neutral position. </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.HandProfile">
            <summary> Generic HandProfile that works for both ann HapticGloves. </summary>
        </member>
        <member name="F:SGCore.HapticGlove.lastFFBCmd">
            <summary> The last Force-Feedback command sent by this Sense Glove. </summary>
        </member>
        <member name="F:SGCore.HapticGlove.lastBuzzCmd">
            <summary> The last Force-Feedback command sent by this Sense Glove. </summary>
        </member>
        <member name="F:SGCore.HapticGlove.lastThumper">
            <summary>  </summary>
        </member>
        <member name="M:SGCore.HapticGlove.GetHandPose(SGCore.Kinematics.BasicHandModel,SGCore.HandProfile,SGCore.HandPose@)">
            <summary> Calculate the Hand Pose of this device, provided it has Hand Tracking available  </summary>
            <param name="profile"></param>
            <param name="handPose"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.HapticGlove.StopHaptics">
            <summary> Stops all Haptic effects if any are currently playing. Useful at the end of simulations or when resetting. </summary>
        </member>
        <member name="M:SGCore.HapticGlove.GetHapticGloves">
            <summary> Get all Haptic Gloves connected to this system. They may or may not be connected </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.HapticGlove.GetGlove(SGCore.HapticGlove@)">
            <summary> Get the first Haptic Glove connected to this System </summary>
            <param name="glove"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.HapticGlove.GetGlove(System.Boolean,SGCore.HapticGlove@)">
            <summary> Get the first left/right Haptic Glove connected to this System </summary>
            <param name="glove"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.HapticGlove.GetCalibrationValues(SGCore.Kinematics.Vect3D[]@)">
            <summary> Retrieve calibration values of this glove, as an array of size 5, containing x (roll), y (flexion), z (abduction) values. </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.HapticGlove.ResetCalibrationRange">
            <summary> Reset Calbratrion range for this Device. </summary>
        </member>
        <member name="M:SGCore.HapticGlove.UpdateCalibrationRange">
            <summary> Updates calibration values only  </summary>
        </member>
        <member name="M:SGCore.HapticGlove.UpdateCalibrationRange(SGCore.Kinematics.Vect3D[])">
            <summary> Updates calibration values only </summary>
        </member>
        <member name="M:SGCore.HapticGlove.UpdateCalibration(SGCore.HandProfile@)">
            <summary> Updates Calibration values and applies it to the Profile. </summary>
            <param name="profile"></param>
        </member>
        <member name="M:SGCore.HapticGlove.ApplyCalibration(SGCore.HandProfile@)">
            <summary> Apply this glove's calibration range to a handProfile </summary>
            <param name="profile"></param>
        </member>
        <member name="T:SGCore.SG.SenseGlove">
            <summary> Interface for the Sense Glove; and exoskeleton Force-Feedback glove. </summary>
        </member>
        <member name="F:SGCore.SG.SenseGlove.gloveModel">
            <summary> Contains all data regarding this Sense Glove </summary>
            <remarks> 
            We're not using a generic DeviceModel as that would require casting
            its DeviceModel to an SGModel each frame. Adding this interface here is faster
            </remarks>
        </member>
        <member name="F:SGCore.SG.SenseGlove.hapticsByte">
            <summary> Byte indicating a new Sense Glove haptic command. </summary>
        </member>
        <member name="F:SGCore.SG.SenseGlove.thumperByte">
            <summary> Byte indicating a new Thumper command. </summary>
        </member>
        <member name="M:SGCore.SG.SenseGlove.#ctor(SGCore.SG.SG_GloveInfo)">
            <summary> Create a new instance of a Sense Glove. </summary>
            <param name="myModel"></param>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetDeviceType">
            <summary> Get the DeviceType enumerator of this SenseGlove, used in DeviceList enumeration. </summary>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetDeviceID">
            <summary> Retrieve this Sense Glove's unique identifier. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetHardwareVersion">
            <summary> Retrieve thisglove's hardware (sub) version.  </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetFirmwareVersion">
            <summary> Retrieve this device's firmware version. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSubFirmwareVersion">
            <summary> Retrieve this device's sub-firmware version. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.IsRight">
            <summary> Check if this Sense Glove is right handed. </summary>
            <remarks> While the variable is stored in SG_GloveModel, added direct access here since its frequently used. </remarks>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetGloveModel">
            <summary> Retrieve this glove's hardware model, which contains its hardware data. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.ToString">
            <summary> Create a string representation of this device for reporting purposes. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSensorData(SGCore.SG.SG_SensorData@)">
            <summary> Get the latest Sensor Data from this Sense Glove. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetIMURotation(SGCore.Kinematics.Quat@)">
            <summary> SenseGlove's IMU Rotation </summary>
            <param name="IMU"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetGlovePose(SGCore.SG.SG_GlovePose@)">
            <summary> Get the pose of this Sense Glove's hardware, based on its latest Sensor Data. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetGlovePose(SGCore.SG.SG_SensorData,SGCore.SG.SG_GlovePose@)">
            <summary> Get the pose of this Sense Glove's hardware based on a set of Sensor Data. </summary>
            <param name="sData"></param>
            <param name="pose"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetHandPose(SGCore.Kinematics.BasicHandModel,SGCore.SG.SG_HandProfile,SGCore.HandPose@)">
            <summary> Retrieve a new hand pose using this glove, based on (calibrated) user data. </summary>
            <param name="profile"></param>
            <param name="solver"></param>
            <param name="handPose"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.SendHaptics(SGCore.Haptics.SG_FFBCmd,SGCore.Haptics.SG_BuzzCmd,SGCore.Haptics.SG_ThumperCmd)">
            <summary> Set the level(s) of Force and Vibrotactile feedback, with an optional thumper command </summary>
            <param name="ffbCmd"></param>
            <param name="buzzMotors"></param>
            <param name="thumper"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.SendHaptics(SGCore.Haptics.SG_FFBCmd)">
            <summary> Send a Force-Feedback command to the Sense Glove. </summary>
            <param name="ffbCmd"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.SendHaptics(SGCore.Haptics.SG_BuzzCmd)">
            <summary> Send a vibration command to the Sense Glove. </summary>
            <param name="buzzCmd"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.SendCmd(SGCore.Haptics.SG_ThumperCmd)">
            <summary> Sends a separate thumper command.</summary>
            <param name="thumperCmd"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.StopHaptics">
            <summary> Stop all haptic feedback on this device. </summary>
        </member>
        <member name="M:SGCore.SG.SenseGlove.ToBytes(SGCore.Haptics.SG_FingerCmd)">
            <summary> Convert a feedback command to a string which can be sent to this particular Sense Glove device. </summary>
            <remarks> Implemented here because the conversion may depend on GloveVersion. </remarks>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.CalculateGlovePose(SGCore.SG.SG_SensorData,SGCore.SG.SG_GloveInfo)">
            <summary> Calculates a GlovePose based on gloveAngles and a glove model. </summary>
        </member>
        <member name="M:SGCore.SG.SenseGlove.CalculateGlovePose(SGCore.Kinematics.Vect3D[][],SGCore.SG.SG_GloveInfo)">
            <summary> Calculates a GlovePose based on gloveAngles and a glove model. </summary>
            <remarks> Use this when you already have gloveAngles collected </remarks>
            <param name="gloveAngles"></param>
            <param name="gloveModel"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.CalculateHandPose(SGCore.SG.SG_GlovePose,SGCore.Kinematics.BasicHandModel,SGCore.SG.SG_HandProfile)">
            <summary> Calculate a HandPose based on a glovePose and a solver. </summary>
            <remarks> Use this when you already have a GlovePose </remarks>
            <param name="glovePose"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.Parse(System.String)">
            <summary> Deserializes a Sense Glove from its CString. Returns a nullptr if unsuccesful. </summary>
             <param name="cString"></param>
             <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSenseGloves">
            <summary> Retrieve all connected Sense Gloves. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSenseGlove(SGCore.SG.SenseGlove@)">
            <summary> Retrieve the first connected Sense Glove connected to this System </summary>
            <param name="glove"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSenseGlove(System.Boolean,SGCore.SGDevice@)">
            <summary> Retrieve the first (connected) right- or left handed sense glove as an abstract SGDevice. </summary>
            <param name="rightHanded"></param>
            <param name="glove"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetSenseGlove(System.Boolean,SGCore.SG.SenseGlove@)">
            <summary> Retrieve the first (connected) right- or left handed sense glove. </summary>
            <param name="rightHanded"></param>
            <param name="glove"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetCalibrationValues(SGCore.Kinematics.Vect3D[]@)">
            <summary>  Retrieve calibration values of this glove, as an array of size 5, containing x (roll), y (flexion), z (abduction) values. </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.GetCalibrationValues(SGCore.SG.SG_GlovePose)">
            <summary> Convert a SenseGlove GlovePose into calibrationValues. </summary>
            <param name="glovePose"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGlove.ApplyCalibration(SGCore.HandProfile@)">
            <summary> Applies the calibration range of this SenseGlove to a HandProfile </summary>
            <param name="profile"></param>
        </member>
        <member name="M:SGCore.SG.SenseGlove.ApplyCalibration(SGCore.SG.SG_HandProfile@)">
            <summary> Applies the calibration range of this SenseGlove to a SG_HandProfile </summary>
            <param name="profile"></param>
        </member>
        <member name="T:SGCore.SG.SenseGloveVars">
            <summary> "Database" class containing Sense Glove internal variables </summary>
        </member>
        <member name="M:SGCore.SG.SenseGloveVars.GetStdCString(System.String,System.Single,System.Boolean)">
            <summary> Retrieve a basic Cstring for a Sense Glove of a specific Hardware Version. Used for debugging / unit tests. </summary>
             <param name="hwVersion"></param>
             <param name="fwVersion"></param>
             <param name="rightHand"></param>
             <returns> Returns an empty string when an invalid glove version is requested. </returns>
        </member>
        <member name="M:SGCore.SG.SenseGloveVars.GetSensorString(System.String,System.Single)">
            <summary> Retrieve an example sensor string of a Sense Glove with a particular hardware- and firmware version. </summary>
            <param name="hwVersion"></param>
            <param name="fwVersion"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGloveVars.GetStartPositions(System.String,System.Boolean)">
            <summary> Retrieve the starting positions of a particular Sense Glove. </summary>
            <param name="hwVersion"></param>
            <param name="isRight"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGloveVars.GetStartRotations(System.String,System.Boolean)">
            <summary> Retrieve the starting rotations of a particular Sense Glove. </summary>
            <param name="hwVersion"></param>
            <param name="isRight"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SenseGloveVars.GetGloveLengths(System.String)">
            <summary> Retrieve the glove finger lengths of a particular Sense Glove. </summary>
            <param name="hwVersion"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.SG.SG_GlovePose">
            <summary> Represents a pose of a Sense Glove exoskeleton. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.JointPositions">
            <summary> Positions of each glove joint, relative to the Glove's Origin. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.JointRotations">
            <summary> Quaternion rotation of each glove joint, relative to the Glove Origin. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.GloveAngles">
            <summary> Glove joint angles in euler notation, relative to the last segment. </summary>
            <remarks> Essentially sensor angles, though placed in their proper xyz notation </remarks>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.IsRight">
            <summary> Determines if this GlovePose was created for a left- or right hand. </summary>
        </member>
        <member name="M:SGCore.SG.SG_GlovePose.#ctor(System.Boolean,SGCore.Kinematics.Vect3D[][],SGCore.Kinematics.Quat[][],SGCore.Kinematics.Vect3D[][])">
            <summary> Creates a new instance of a SG_GlovePose </summary>
            <param name="positions"></param>
            <param name="rotations"></param>
            <param name="jointAngles"></param>
        </member>
        <member name="M:SGCore.SG.SG_GlovePose.IdlePose(SGCore.SG.SG_GloveInfo)">
            <summary> Returns an idle pose for the Sense Glove if no data can be found. </summary>
            <param name="glove"> The glove model to use for the idle position. </param>
            <returns></returns>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.ThimblePositions">
            <summary> The position of the tip of the 'thimbles', the furthest link on each glove link. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.ThimbleRotations">
            <summary> The (quaternion) rotation of the 'thimbles', the furthest link on each link.  </summary>
        </member>
        <member name="P:SGCore.SG.SG_GlovePose.TotalGloveAngles">
            <summary> Sum of the Sensor angles in each (xyz) direction. "Total Pronation / Flexion / Abduction" </summary>
        </member>
        <member name="M:SGCore.SG.SG_GlovePose.CalculateFingerTips(SGCore.SG.SG_HandProfile)">
            <summary> Calculate fingertip positions based on a user profile. </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GlovePose.CalculateFingerTips(SGCore.Kinematics.Vect3D[])">
            <summary> Calculate fingertip positions, knowing the offset between thimble and fingertips. </summary>
            <param name="fingerOffsets"></param>
            <returns></returns>
        </member>
        <member name="T:SGCore.SG.SG_FingerSolver">
            <summary> How this Sense Glove converts sensor data into a HandPose. </summary>
        </member>
        <member name="F:SGCore.SG.SG_FingerSolver.Interpolation">
            <summary> Hand angles are interpolated based on the total flexion / abduction of the exoskeleton </summary>
        </member>
        <member name="T:SGCore.SG.SG_ThumbSolver">
            <summary> How this Sense Glove converts sensor data into a HandPose. </summary>
        </member>
        <member name="F:SGCore.SG.SG_ThumbSolver.Interpolation">
            <summary> Hand angles are interpolated based on the total flexion / abduction of the exoskeleton </summary>
        </member>
        <member name="F:SGCore.SG.SG_ThumbSolver.DistanceBased">
            <summary> Hand angles are interpolated based on the total flexion / abduction of the exoskeleton </summary>
        </member>
        <member name="T:SGCore.SG.SG_HandProfile">
            <summary> Contains everything a Sense Glove needs to calculate a HandPose. </summary>
        </member>
        <member name="P:SGCore.SG.SG_HandProfile.IsRight">
            <summary> Whether this profile has been created for a left or right hand. </summary>
        </member>
        <member name="P:SGCore.SG.SG_HandProfile.ThumbSolver">
            <summary> Solver property that determines _how_ HandPoses are calcaulted. </summary>
        </member>
        <member name="P:SGCore.SG.SG_HandProfile.FingerSolver">
            <summary> Solver property that determines _how_ finger poses are calcaulted. </summary>
        </member>
        <member name="P:SGCore.SG.SG_HandProfile.InterpolationSet">
            <summary> Interpolation set to estimate joint angles. </summary>
        </member>
        <member name="P:SGCore.SG.SG_HandProfile.FingerThimbleOffset">
            <summary> Offset from thimble to fingertip, used for Inverse Kinematics. </summary>
        </member>
        <member name="F:SGCore.SG.SG_HandProfile.dThimbleOffset">
            <summary> Default offset from thimble to fingertip. </summary>
        </member>
        <member name="M:SGCore.SG.SG_HandProfile.#ctor(System.Boolean,SGCore.Kinematics.HandInterpolator,SGCore.SG.SG_ThumbSolver,SGCore.SG.SG_FingerSolver,SGCore.Kinematics.Vect3D[])">
            <summary>  Create a new Hand Profile for the Sense Glove. </summary>
            <param name="right"></param>
            <param name="interpolator"></param>
            <param name="thumbSolvr"></param>
            <param name="fingerSolvr"></param>
            <param name="fingerThimbleOffset"></param>
        </member>
        <member name="M:SGCore.SG.SG_HandProfile.Default(System.Boolean)">
            <summary> Retrieve a 'new' profile, for either a left or right hand. </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_HandProfile.Reset">
            <summary> Resets this profile to default values. </summary>
        </member>
        <member name="M:SGCore.SG.SG_HandProfile.Serialize">
            <summary> Convert this profile and its calibration data into a portable string representation.. </summary>
        </member>
        <member name="M:SGCore.SG.SG_HandProfile.Deserialize(System.String)">
            <summary> Convert a string representation of an SG_HandProfile into useable data. </summary>
        </member>
        <member name="T:SGCore.SG.SG_Functions">
            <summary> Functions that a Sense Glove cound have. </summary>
        </member>
        <member name="F:SGCore.SG.SG_Functions.SG_BuzzMotors">
            <summary> Vibration Motors to send haptic pulses to individual fingers  </summary>
        </member>
        <member name="F:SGCore.SG.SG_Functions.SG_ForceFeedback">
            <summary> Brakes which can inhibit grasping motions to create force feedback. </summary>
        </member>
        <member name="F:SGCore.SG.SG_Functions.SG_Thumper">
            <summary> A Thumper Module for global feedback. </summary>
        </member>
        <member name="F:SGCore.SG.SG_Functions.SG_AllFunctions">
            <summary> Utility value used for enumeration. It can also be used to check if a Sense Glove has all possible functionalities. </summary>
        </member>
        <member name="T:SGCore.SG.SG_GloveInfo">
            <summary> Contains device information about a Sense Glove. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.IsRight">
            <summary> Check if this Sense Glove belongs to a left or right hand. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.NumberOfSensors">
            <summary> The number of Sensors in this SenseGlove. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.ImuCorrection">
            <summary> The IMU correction of this Sense Glove. </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.StartPositions">
            <summary> The starting positions of each Sense Glove finger, relative to the glove origin </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.StartRotations">
            <summary> The starting rotations of each Sense Glove finger, relative to the glove origin </summary>
        </member>
        <member name="P:SGCore.SG.SG_GloveInfo.GloveLengths">
            <summary> The lengths of each Sense Glove finger section, in mm. </summary>
        </member>
        <member name="F:SGCore.SG.SG_GloveInfo.functions">
            <summary> Whether this device has a specific function (T/F). </summary>
            <remarks> Functions are dependent on Device Type. </remarks>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,SGCore.Kinematics.Quat,SGCore.Kinematics.Vect3D[],SGCore.Kinematics.Quat[],SGCore.Kinematics.Vect3D[][],System.Boolean[])">
            <summary> Create a new Sense Glove device model </summary>
            <param name="ID"></param>
            <param name="hwVer"></param>
            <param name="fwVer"></param>
            <param name="rightHand"></param>
            <param name="noSensors"></param>
            <param name="imuCorr"></param>
            <param name="startPos"></param>
            <param name="startRot"></param>
            <param name="lengths"></param>
            <param name="functionality"></param>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.GetStartPosition(SGCore.Finger)">
            <summary> Retrieve the starting position of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.GetStartRotation(SGCore.Finger)">
            <summary> Retrieve the starting rotation of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.GetGloveLengths(SGCore.Finger)">
            <summary> Retrieve the finger section lengths of a specific finger. </summary>
            <param name="finger"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.HasFunction(SGCore.SG.SG_Functions)">
            <summary> Check if this Sense Glove has a particular function. </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.ToGloveAngles(System.Single[][])">
            <summary> Place incoming sensor data into the right xyz format, according to this glove's model. </summary>
            <param name="sensorAngles"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.ToString">
            <summary> Create a string representation for fast logging. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.ToString(System.Boolean)">
            <summary> Create a string representation for logging. </summary>
            <param name="shortNotation">If set to false, an more extensive log is created.</param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.Parse(System.String,SGCore.SG.SG_GloveInfo@,System.Boolean)">
            <summary> Create an instance of the SGModel from its string representation. </summary>
            <param name="cString"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.ParseLengthString(System.String)">
            <summary> Parse a section of constants into a set of glove lengths. </summary>
            <param name="rawLengths"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_GloveInfo.ParseStartValues(System.String,SGCore.Kinematics.Vect3D[]@,SGCore.Kinematics.Quat[]@)">
            <summary> Parse a section of constants into a set starting positions and -rotations. </summary>
            <param name="rawValues"></param>
            <param name="startPos"></param>
            <param name="startRot"></param>
        </member>
        <member name="T:SGCore.SG.SG_SensorData">
            <summary> Processed Sensor Data coming from a Sense Glove. </summary>
        </member>
        <member name="P:SGCore.SG.SG_SensorData.ParsedValues">
            <summary> The total amount of sensor values that were parsed in the string (used to check for validity / sensor placement). </summary>
        </member>
        <member name="P:SGCore.SG.SG_SensorData.SensorAngles">
            <summary> Glove angles in radians, sorted by finger, from proximal to distal </summary>
        </member>
        <member name="P:SGCore.SG.SG_SensorData.ImuValues">
            <summary> Quaternion rotation of the IMU within the Sense Glove. </summary>
        </member>
        <member name="P:SGCore.SG.SG_SensorData.ImuParsed">
            <summary> Whether or not the IMU was properly parsed. </summary>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.#ctor(System.Single[][],SGCore.Kinematics.Quat,System.Int32,System.Boolean)">
            <summary> Create a new instance of a Sense Glove Sensor Data class. </summary>
            <param name="angles"></param>
            <param name="imu"></param>
            <param name="sNumber"></param>
            <param name="imuComplete"></param>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.GetAngles(SGCore.Finger)">
            <summary> Get the glove angles of a specific finger segment </summary>
             <param name="finger"></param>
             <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.GetAngleSequence">
            <summary> Returns all glove angles in a sequence, without splitting them per finger. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.ToString">
            <summary> Retrieve a simple representaton of this sensor data for debugging purposes. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.Parse(System.String,SGCore.SG.SG_GloveInfo)">
            <summary> Deserialize Sense Glove sensor data from a raw char[] recieved through IPC. </summary>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.Empty">
            <summary> Returns sensor data with no values. </summary>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.Serialize">
            <summary> Serialize this HandProfile into a string representation </summary>
        </member>
        <member name="M:SGCore.SG.SG_SensorData.Deserialize(System.String)">
            <summary> Deserialize a HandProfile back into useable values. </summary>
        </member>
        <member name="T:SGCore.Parsing.SG_CVar">
            <summary> Sense Glove C string Variables, enumerated for our convinience. </summary>
        </member>
        <member name="F:SGCore.Parsing.SG_CVar.AllC">
            <summary> Utility value used in iteration / checking lengths </summary>
        </member>
        <member name="T:SGCore.Parsing.SG_SVar">
            <summary> Sense Glove sensor string Variables, enumerated for our convinience. </summary>
        </member>
        <member name="F:SGCore.Parsing.SG_SVar.AllS">
            <summary> Utility value used in iteration / checking lengths </summary>
        </member>
        <member name="T:SGCore.SGConnect">
            <summary> The only class within the DLL to allow access to the SGComm C++ library. </summary>
            <remarks> Should therefore only contain static methods. </remarks>
        </member>
        <member name="M:SGCore.SGConnect.I_ActiveDevices">
            <summary> Retrieve the devices detected by the SenseComm. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGConnect.I_GetDeviceString(System.String,System.Text.StringBuilder)">
            <summary> Gets the raw string from the DeviceList memory block. </summary>
            <param name="deviceIndex"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGConnect.I_GetSensorString(System.String,System.Text.StringBuilder)">
            <summary>  Get the raw (unprocessed) sensor data of the SGDevice at index, as discovered by SenseCom  </summary>
            <param name="deviceAddress"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGConnect.I_WriteHaptics(System.String,System.String)">
            <summary>  </summary>
            <param name="deviceAddress"></param>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGConnect.I_ScanningActive">
            <summary> Scheck if the SenseCom scanning is running. </summary>
            <returns></returns>
        </member>
        <member name="T:SGCore.SGDevice">
            <summary> A Sense Glove device that can send / recieve data via the SenseComm program. </summary>
        </member>
        <member name="F:SGCore.SGDevice.deviceIndex">
            <summary> The index of this device inside the SenseComm program. Used to access shared memory. </summary>
        </member>
        <member name="M:SGCore.SGDevice.GetDeviceType">
            <summary> Retrieve the DeviceType of this SGDevice. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetDeviceID">
            <summary> Retrieve this device's unique identifier. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetHardwareVersion">
            <summary> Retrieve this device's hardware version. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetFirmwareVersion">
            <summary> Retrieve this device's main firmware version. v4.12 returns 4. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetSubFirmwareVersion">
            <summary> Retrieve this device's sub firmware version. v4.12 returns 12. </summary>
        </member>
        <member name="M:SGCore.SGDevice.FirmwareString">
            <summary> Retreive the Device's firmware as a string. Ex. "v4.7" </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetAddress">
            <summary> Retrieve this Device's Serial/Bluetooth address. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetConnectionType">
            <summary> Retrieve the connection type of this Sense Glove. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.IsConnected">
            <summary> Check if this device is currently connected to the system. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.PacketsPerSecond">
            <summary> Retrieve the device's Packets per Second Variable </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.GetDeviceIndex">
            <summary> Retrieve the index of this device within SenseComm. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.SetDeviceIndex(System.Int32)">
            <summary> Change this device's index within the SenseComm. Warning: Can cause errors. </summary>
            <remarks> Which is why its internal. </remarks>
            <param name="newIndex"></param>
        </member>
        <member name="M:SGCore.SGDevice.ToString">
            <summary> Retrieve a String representation of this object. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.SGDevice.ParseFirmware(System.String,System.Int32@,System.Int32@)">
            <summary> Parse a main and sub firmware version from its raw (v4.12) notation </summary>
            <param name="rawFW"></param>
            <param name="mainVer"></param>
            <param name="subVer"></param>
        </member>
        <member name="T:SGCore.Haptics.SG_BuzzCmd">
            <summary> A vibration command for the Sense Glove, with levels for each finger.  </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_BuzzCmd.buzzMin">
            <summary> The minimum buzz motor level input </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_BuzzCmd.buzzMax">
            <summary> The maximum buzz motor level input </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_BuzzCmd.off">
            <summary> A command that turns off all vibration motors of the Sense Glove. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_BuzzCmd.Off">
            <summary> Retrieve the command that turns off Buzz Motors </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.#ctor">
            <summary> Empty constructor for inheritance. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.#ctor(System.Int32[])">
            <summary> Create a new buzz motor command, where each finger level is contained inside an array of size 5. </summary>
            <param name="buzzLvls"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.#ctor(System.Boolean[],System.Int32)">
            <summary> Create a new instance of a BuzzCmd where specified fingers have the same buzz lvl. </summary>
            <param name="fingers"></param>
            <param name="buzzLvl"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Create a new Buzz Motor command, indicating the intensity for each finger. </summary>
            <param name="thumb"></param>
            <param name="index"></param>
            <param name="middle"></param>
            <param name="ring"></param>
            <param name="pinky"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.#ctor(SGCore.Finger,System.Int32)">
            <summary> Create a new Buzz Motor command, with only one finger being activated. </summary>
            <param name="finger"></param>
            <param name="level"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.Validate(System.Int32)">
            <summary> Ensure that an input values is places in between the minimum and maximum range. </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.Merge(SGCore.Haptics.SG_BuzzCmd)">
            <summary> Merge this command with another, taking the maximum value between the two. </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_BuzzCmd.Copy">
            <summary> Copy this Buzz Command into a new object. </summary>
            <returns></returns>
        </member>
        <member name="T:SGCore.Haptics.SG_FFBCmd">
            <summary> A Force-Feedback command for the Sense Glove, with levels for each finger. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_FFBCmd.ffbMin">
            <summary> Minimum Force-Feedback Level </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_FFBCmd.ffbMax">
            <summary> Maximum Force-Feedback Level </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_FFBCmd.off">
            <summary> A command that turns off all force feedback on the Sense Glove. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FFBCmd.Off">
            <summary> Retrieve the command that turns off Buzz Motors </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.#ctor">
            <summary> Empty constructor for internal initialization. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Create a new Force-Feedback Command, with levels for each finger </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.#ctor(SGCore.Finger,System.Int32)">
            <summary> Create a new Force-Feedback command, with only one finger being activated. </summary>
            <param name="finger"></param>
            <param name="level"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.#ctor(System.Int32[])">
            <summary> Create a new Force-Feedback Command, with levels for each finger stored in an int[5] array. </summary>
            <param name="ffbLevels"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.Validate(System.Int32)">
            <summary> Ensure that an input values is places in between the minimum and maximum range. </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.Merge(SGCore.Haptics.SG_FFBCmd)">
            <summary> Merge this finger command with another, taking the maximum value between the two. </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_FFBCmd.Copy">
            <summary> Copy the values of this Force Feedback command into a new object </summary>
            <returns></returns>
        </member>
        <member name="T:SGCore.Haptics.SG_FingerCmd">
            <summary> A command that contains values (levels) for five fingers. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_FingerCmd.levels">
            <summary> Input level for specific finger. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.ThumbLvl">
            <summary> Level of the Thumb. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.IndexLvl">
            <summary> Level of the Index Finger. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.MiddleLvl">
            <summary> Level of the Middle Finger. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.RingLvl">
            <summary> Level of the Ring Finger. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.PinkyLvl">
            <summary> Level of the Little Finger or Pinky. </summary>
        </member>
        <member name="P:SGCore.Haptics.SG_FingerCmd.Levels">
            <summary> Access the levels of this FingerCmd. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.GetLevel(System.Int32)">
            <summary> Get the level of a specific finger. </summary>
            <remarks> Marked internal to prevent IndexOutofRangeExceptions</remarks>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.SetLevel(System.Int32,System.Int32)">
            <summary> Set the level of a specific finger. </summary>
            <remarks> Marked internal to prevent IndexOutofRangeExceptions</remarks>
            <param name="f"></param>
            <param name="lvl"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.#ctor">
            <summary> Creates a new haptic Command for the hand. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.Validate(System.Int32)">
            <summary> Ensure that a value is within acceptable range. </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.Equals(SGCore.Haptics.SG_FingerCmd)">
            <summary> Check if this command contains the same values as another. </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_FingerCmd.ToString">
            <summary> Create a string representation of this finger command. </summary>
            <returns></returns>
        </member>
        <member name="T:SGCore.Haptics.SG_ThumperCmd">
            <summary> A command to activate the Sense Glove Thumper Module, which is responsible for wrist feedback. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.None">
            <summary> We don't want the thumper to do anything right now... </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.TurnOff">
            <summary> Turn off the thumper effects. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Cue_Game_Over">
            <summary> A 5-second long, constant vibration. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Button_Double_100">
            <summary> A double-click at 100% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Button_Double_60">
            <summary> A double click at 60% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Impact_Thump_100">
            <summary> Simulates an impact of the hand at 100% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Impact_Thump_30">
            <summary> Simulates an impact of the hand at 30% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Impact_Thump_10">
            <summary> Simulates an sharp impact of the hand at 40% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Object_Grasp_100">
            <summary> A light vibration to cue the user that an object it picked up. 100% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Object_Grasp_60">
            <summary> A light vibration to cue the user that an object it picked up. 60% intensity. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_ThumperCmd.Object_Grasp_30">
            <summary> A light vibration to cue the user that an object it picked up. 30% intensity. </summary>
        </member>
        <member name="T:SGCore.Haptics.SG_TimedBuzzCmd">
            <summary> Buzz motor commands that is meant to stop after a few miliseconds. </summary>
            <remarks> Intended use; this.levels indicates the actual command </remarks>
        </member>
        <member name="F:SGCore.Haptics.SG_TimedBuzzCmd.baseCmd">
            <summary> The Buzz Motor command used to create the timing. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_TimedBuzzCmd.buzzTimes">
            <summary> The total time each buzz motor should be vibrating for. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_TimedBuzzCmd.elapsedTime">
            <summary> The time elapsed since the command was sent. </summary>
        </member>
        <member name="F:SGCore.Haptics.SG_TimedBuzzCmd.maxTiming">
            <summary> The maximum time a buzz command has been sent. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.#ctor(SGCore.Haptics.SG_BuzzCmd,System.Int32[])">
            <summary> Create a new timed buzz command. </summary>
            <param name="command"></param>
            <param name="timings_ms"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.#ctor(SGCore.Haptics.SG_BuzzCmd,System.Int32)">
            <summary> Create a new buzz motor command that expires after timing_ms </summary>
            <param name="command"></param>
            <param name="timing_ms"></param>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.GetBaseCommand">
            <summary> Access the base command, which indicates the buzz levels to keep untill time elapses. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.TimeElapsed">
            <summary> Check if this timed command's timing has elapsed </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.Copy">
            <summary> Copy this Buzz Command's values into a new object. </summary>
            <returns></returns>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.ResetTiming">
            <summary> Reset the timings of this BuzzCmd, allowing us to re-use it. </summary>
        </member>
        <member name="M:SGCore.Haptics.SG_TimedBuzzCmd.UpdateTiming(System.Int32)">
            <summary> Update the elapsed time to check if the buzz motors should stop. </summary>
            <param name="ms_dT"></param>
        </member>
    </members>
</doc>
